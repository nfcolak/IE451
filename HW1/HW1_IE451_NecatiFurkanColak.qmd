---
title: "Spring 2023 IE 451 Homework-1"
author: Necati Furkan Çolak
date: "15 02 2023"
editor : visual
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(car)
df <- nycflights13::flights
```

## **5.2.4 EXERCISES:**

To see the general pattern of the data, I decided to look at first 5 rows with head method.

```{r}
df %>% head()
```

**EXERCISE 1.1 (5.2.4):**

**Q:** Had an arrival delay of two or more hours.

```{r}
df %>% 
  filter(arr_delay >= 120) %>%
  select(tailnum, arr_delay)  
```

**EXERCISE 1.2 (5.2.4):**

**Q:** Flew to Houston (IAH or HOU).

```{r}
class(df$dest)
df %>% 
  filter(dest == "IAH" | dest == "HOU") %>% 
  select(tailnum, dest)
```

**EXERCISE 1.3 (5.2.4):**

**Q:** Were operated by United, American, or Delta.

```{r}
df %>% 
  filter(carrier %in% c("UA", "AA", "DL")) %>% 
  select(tailnum, carrier)
```

**EXERCISE 1.4 (5.2.4):**

**Q:** Departed in summer (July, August, and September)

```{r}
filter(df, month >= 7, month <= 9) %>% head()
filter(df, month %in% 7:9)
```

**EXERCISE 1.5 (5.2.4):**

**Q:** Arrived more than two hours late, but didn't leave late.

```{r}
filter(df, arr_delay > 120, dep_delay <= 0)
```

**EXERCISE 1.6 (5.2.4):**

**Q:** Were delayed by at least an hour, but made up over 30 minutes in flight.

```{r}
df %>% 
  filter(dep_delay >= 60, dep_delay - arr_delay > 30) %>% 
  select(tailnum, dep_delay, arr_delay) %>% 
  mutate(diff = dep_delay - arr_delay)
```

**EXERCISE 1.7 (5.2.4):**

**Q:** Departed between midnight and 6am (inclusive).

```{r}
filter(df, dep_time <= 600 | dep_time == 2400)
```

**EXERCISE 2 (5.2.4):**

**Q:** Another useful dplyr filtering helper is [`between()`](https://dplyr.tidyverse.org/reference/between.html). What does it do? Can you use it to simplify the code needed to answer the previous challenges?

**Answer:** It can be used to simplify the code since it's useful tool to determine intervals. In the code below, you can find the flights that their number between 0 and 100.

```{r}
filter(df, between(flight, 0, 100)) %>% 
select(tailnum,flight)
```

**EXERCISE 3 (5.2.4):**

How many flights have a missing `dep_time`? What other variables are missing? What might these rows represent?

```{r}
count(filter(df, is.na(dep_time)))
```

## **EXERCISES 5.3.1:**

**EXERCISE 2 (5.3.1):**

**Q:** Sort flights to find the most delayed flights. Find the flights that left earliest.

```{r}
df %>% arrange(desc(dep_delay)) %>% 
  select(tailnum, dep_delay) %>% 
  head() #most delayed flights

df %>% arrange(dep_delay) %>% 
  select(tailnum, dep_delay) %>% 
  head() #left earliest
```

**EXERCISE 3 (5.3.1):**

**Q:** Sort flights to find the fastest (highest speed) flights.

```{r}
df$Speed <- df$distance / df$air_time

df %>% 
  arrange(desc(Speed)) %>%
  select(tailnum, Speed) %>% 
  head()
```

**EXERCISE 4 (5.3.1):**

**Q:** Look at the number of cancelled flights per day. Is there a pattern? Is the proportion of cancelled flights related to the average delay?

```{r}
df %>% 
  arrange(desc(distance)) %>% 
  select(tailnum, distance) %>% 
  head()

df %>% 
  arrange(distance) %>% 
  select(tailnum, distance) %>% 
  na.omit() %>% head()
```

## EXERCISES 5.6.7:

**EXERCISE 5 (5.6.7):**

**Q:** Which carrier has the worst delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights %>% group_by(carrier, dest) %>% summarise(n())`)

```{r}
airport_vs <- df %>% 
  group_by(carrier, dest) %>% 
  summarise(count = n(), mean_delay = mean(dep_delay, na.rm = TRUE), .groups = "drop") %>% 
  na.omit()
```

The "airport_vs" data frame presents various combinations of airports and carriers, sorted by carriers. This allows us to focus on a single carrier and compare the average delays between different airports to differentiate the effects of airports and carriers. For example, by examining the 8th and 9th rows, we can compare the mean delays of two airports, BUF and BWI, when the carrier is 9E. It can be observed that BWI has a higher average delay than BUF for this carrier. This implies that, on average, BUF airport performs better than BWI airport for the 9E carrier. It should be noted that chosen destinations are important too. For example, while BUF has 833 cell, BWI has 856. This situation enables more robust solutions since the shape of data frames are quite similar.

```{r}
carrier_vs <- df %>% 
  group_by(dest, carrier) %>% 
  summarise(count = n(), mean_delay = mean(dep_delay, na.rm = TRUE)) %>% 
  na.omit()

carrier_vs %>% head(10)
```

Using the "carrier_vs" data frame, we can compare various carriers by selecting a fixed airport. Specifically, when looking at the ATL airport, it can be observed that carrier FL experiences more delays compared to carrier MQ. Therefore, it can be concluded that, on average, carrier FL experiences greater delays than carrier MQ when operating at the ATL airport.

## **EXERCISES 5.7.1:**

**Exercise 2 (5.7.1):**

**Q:** Which plane (`tailnum`) has the worst on-time record?

```{r}
df %>% 
  mutate(average_delay = dep_delay + arr_delay) %>% 
  filter(!is.na(average_delay)) %>% 
  group_by(tailnum) %>% 
  summarise(mean_delay = mean(average_delay, na.rm = T), count = n()) %>% 
  arrange(desc(mean_delay)) %>% 
  filter(count > 30) %>%
  select(tailnum, mean_delay, count) %>% 
  head()
```

With the result shown above, it should be clarified that the worst N203FR has the worst time record. In my solution approach, I consider the total average delay (arrival delay and departure delay.) However, both of them can be used as a single variable in other variations. These variations can be found below.

**Exercise 3 (5.7.1):**

**Q:** What time of day should you fly if you want to avoid delays as much as possible?

```{r}
df %>% 
  group_by(hour) %>% 
  mutate(total_delay = dep_delay + arr_delay) %>% 
  summarise(mean_delay = mean(total_delay, na.rm = TRUE)) %>% 
  arrange(mean_delay) %>% 
  head()
```

In that case, the best result is 5AM to prevent delays on flights.
